@inject IUserService UserService
@inject IJSRuntime js
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigationManager

@using Domain.Models;

@page "/registration"

<div class="row">
	<div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
		<div class="mb-3 text-center">
			<h3>Registration</h3>
		</div>

		<div class="mb-3">
			<label>Name</label>
			<input @bind="name" type="email" class="form-control" placeholder="Name" />
		</div>

		<div class="mb-3">
			<label>Surname</label>
			<input @bind="surname" type="email" class="form-control" placeholder="Surname" />
		</div>

		<div class="mb-3">
			<label>Email</label>
			<input @bind="email" type="email" class="form-control" placeholder="Login" />
		</div>

		<div class="mb-3">
			<label>Password</label>
			<input @bind="password" type="password" class="form-control" placeholder="Password" />
		</div>

		<div class="mb-3">
			<label>Phone number (optional)</label>
			<input @bind="phoneNumber" type="email" class="form-control" placeholder="Phone number (optional)" />
		</div>

		<div class="mb-3">
			<label>Birthday</label>
			<input @bind="birthday" type="date" class="form-control" placeholder="Birthday" />
		</div>

		<div class="mb-3 d-grid gap-2">
			<button @onclick="RegistrateUser" class="btn btn-primary">Register</button>
		</div>
	</div>
</div>


@code {
	string name;
	string surname;
	string email;
	string password;
	long? phoneNumber;
	DateTime birthday;

	private async Task RegistrateUser()
	{
		try
		{
			User user = new User()
			{
				Name = name,
				Surname = surname,
				Email = email,
				Role = "User",
				Password = password,
				PhoneNumber = phoneNumber,
				Birthday = birthday
			};

			await UserService.Create(user);

			navigationManager.NavigateTo("/login");
		}
		catch (Exception ex)
		{
			await js.InvokeVoidAsync("alert", "Invalid data!");
		}
	}
}
